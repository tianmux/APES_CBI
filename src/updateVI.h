void updateVI(double *data,
                double* k, 
                int nData_tot,
                double dt, 
                double* I_I_ref,
                double* I_Q_ref,
                double* V_I_ref,
                double* V_Q_ref,
                double* PA_cap,
                double* R,
                double* gii,
                double* gqq,
                double* gii_i,
                double* gqq_i,
                double* I,
                double* Q,
                double* sintable, 
                double* costable, 
                double* tempI,
                double* tempQ,
                std::vector<std::vector<double>>& Sp,
                std::vector<std::vector<double>>& S,
                std::vector<double> epsilon_comb,
                std::vector<double> g_comb,
                std::vector<double>& errorI_p,
                std::vector<double>& errorQ_p,
                std::vector<double>& errorI_i,
                std::vector<double>& errorQ_i,
                int* delay, 
                int* Update_Interval,
                int* nSmp,
                int nRF, int nRF1,int nRFc, int nRF2,int stride,int nBeam);

void updateIb(double* particle_coords, double* data, double* weight, 
            double dt, double* q, std::vector<double> &qpb,
            int fill_count, int nPar, int totBin, int shift, int stride,int nBeam,
            int* index, int* neighbor,int* parFlag);

void updateIb0(double* particle_coords, double* data, double* weight, 
            double dt, double* q, 
            int fill_count, int nPar, int totBin, int shift, int stride,int nBeam,
            int* index, int* neighbor,int* parFlag);

void next_time_point();// find the next special time point, 